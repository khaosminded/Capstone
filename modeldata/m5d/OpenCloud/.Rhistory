head(pgbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(pgbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
head(pgbench)
pgbench <- read.table("./50x_m5d_pgbench_open_cloud_11-16-2019-14_29pm_14_45pm_us-east-1b.csv", sep=",", header=TRUE)
setwd("/home/ravschoo/ResourceContention/IaaSCloudResourceContention/modeldata/m5d/OpenCloud/")
#Clear workspace
rm(list=ls())
#I need to take it each benchmarks data set
ycruncher <- read.table("./ycruncher_standardized.csv", sep=",", header=TRUE)
sysbench <- read.table("./sysbench_standardized.csv", sep=",", header=TRUE)
pgbench <- read.table("./pgbench_standardized.csv", sep=",", header=TRUE)
iperf <- read.table("./iperf_standardized.csv", sep=",", header=TRUE)
rm(list=ls())
pgbench <- read.table("./50x_m5d_pgbench_open_cloud_11-16-2019-14_29pm_14_45pm_us-east-1b.csv", sep=",", header=TRUE)
head(pgbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(pgbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
#pgbench <- cbind(pgbench, exp_ids)
pgbench <- pgbench[pgbench$instanceID != "",]
pgbench <- cbind(pgbench, vm_ids)
tail(pgbench)
dim(pgbench)
#Write out the data we are interested in
pgbench <- pgbench[c("vm_ids","instanceID","transactions")]
colnames(pgbench) <-c("vmId", "instanceID","pgbench")
write.csv(pgbench,"./pgbench_standardized.csv",row.names = FALSE)
#We only want the average of each record
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
average[index] <- mean(pgbench[pgbench$instanceID == instance, "transactions"])
index <- index + 1
}
warnings()
levels(pgbench$instanceID)
pgbench[pgbench$instanceID == "i-0ff32a7bce1e3a734", "transactions"]
View(pgbench)
View(pgbench)
pgbench[pgbench$instanceID == "i-0ca55bbf96a4d4a74", "transactions"]
pgbench[pgbench$instanceID == i-0ca55bbf96a4d4a74, "transactions"]
install.packages("gdata")
#We only want the average of each record
map <- mapLevels(pgbench$instanceID)
#We only want the average of each record
library(gdata)
map <- mapLevels(pgbench$instanceID)
View(map)
pgbench$instanceID
map["i-0f83d46715e5b7ba9"]
map[48]
map[48][1]
map[48][2]
map[48][1][1]
map["i-0f83d46715e5b7ba9"]
map["i-0f83d46715e5b7ba9"][1]
map[["i-0f83d46715e5b7ba9"]]
map[[48]]
map[48]["i-0f83d46715e5b7ba9"]
map[48][["i-0f83d46715e5b7ba9"]]
map[48][[1]]
print(intance)
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
print(intance)
#average[index] <- mean(pgbench[pgbench$instanceID == instance, "transactions"])
#index <- index + 1
}
for (instance in levels(pgbench$instanceID)) {
print(instance)
#average[index] <- mean(pgbench[pgbench$instanceID == instance, "transactions"])
#index <- index + 1
}
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
#print(instance)
average[index] <- mean(pgbench[pgbench$instanceID == map[[instance]], "transactions"])
index <- index + 1
}
map[["i-0ff32a7bce1e3a734"]]
pgbench[pgbench$instanceID == map[["i-0ff32a7bce1e3a734"]], "transactions"]
head(pgbench
)
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
#print(instance)
average[index] <- mean(pgbench[pgbench$instanceID == map[[instance]], "pgbench"])
index <- index + 1
}
#for each vmId save one av
pgbench[pgbench$instanceID == map[["i-04b9c2f75a375d7e5"]], "pgbench"]
map[["i-04b9c2f75a375d7e5"]]
pgbench$instanceID
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
#print(instance)
average[index] <- mean(pgbench[pgbench$instanceID == instance, "pgbench"])
index <- index + 1
}
average
iperf <- data.frame(average, rep.int(1, 50), 1:50)
View(iperf)
#Set working Directory for this script and clear the working environment
setwd("/home/ravschoo/ResourceContention/IaaSCloudResourceContention/modeldata/m5d/OpenCloud/")
rm(list=ls())
pgbench <- read.table("./50x_m5d_pgbench_open_cloud_11-16-2019-14_29pm_14_45pm_us-east-1b.csv", sep=",", header=TRUE)
head(pgbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(pgbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
#pgbench <- cbind(pgbench, exp_ids)
pgbench <- pgbench[pgbench$instanceID != "",]
pgbench <- cbind(pgbench, vm_ids)
tail(pgbench)
dim(pgbench)
#Write out the data we are interested in
pgbench <- pgbench[c("vm_ids","instanceID","transactions")]
colnames(pgbench) <-c("vmId", "instanceID","pgbench")
#for each instanceID save one average.
average <- vector()
index <- 1
for (instance in levels(pgbench$instanceID)) {
#print(instance)
average[index] <- mean(pgbench[pgbench$instanceID == instance, "pgbench"])
index <- index + 1
}
colnames(pgbench) <- c("instanceID", "pgbench", "setId", "vmId")
pgbench <- data.frame(levels(pgbench$instanceID), average, rep.int(1, 50), 1:50)
colnames(pgbench) <- c("instanceID", "pgbench", "setId", "vmId")
View(pgbench)
write.csv(pgbench,"./pgbench_standardized.csv",row.names = FALSE)
rm(list=ls())
iperf <- read.table("./Wes_Data_Fix_Iperf.csv", sep=",", header=TRUE)
head(iperf)
#Standardize MBS and GBS and get rid of this string
#On the raw data this shows a mixture of GBS and MBS.
gb <- "Gbits/sec"
mb <- "Mbits/sec"
print(iperf$bandwidthUpload[50:100])
#Convert gigabytes to megabytes
new_upload = vector()
index <- 1
for (i in iperf$bandwidthUpload) {
num <- i
if (grepl(gb, num)) {
num <- as.numeric(gsub(gb, "", num))
new_upload[index] <- num
} else {
num <- as.numeric(gsub(mb, "", num))
num <- num / 1000
new_upload[index] <- num
}
index <- index + 1
}
#This prints out the standardized numbers
print(new_upload[50:100])
#Now do same thing with download and combine them.
new_download = vector()
index <- 1
for (i in iperf$bandwitdhDownload) {
num <- i
if (grepl(gb, num)) {
num <- as.numeric(gsub(gb, "", num))
new_download[index] <- num
} else {
num <- as.numeric(gsub(mb, "", num))
num <- num / 1000
new_download[index] <- num
}
index <- index + 1
}
new_bandwidth <- new_upload + new_download
#and put the new total bandwidth into the dataframe
iperf$Total <- new_bandwidth
head(iperf)
tail(iperf)
levels(iperf$instanceID)
means = vector()
index = 1
for (instanceId in levels(iperf$instanceID)) {
totals <- iperf[iperf$instanceID == instanceId, "Total"]
means[index] <- mean(totals)
index <- index + 1
#print(instanceId)
}
#get rid of two na values, replace with mean of all means.
print(means)
iperf$Total[which(is.na(iperf$Total))] <- mean(means, na.rm=TRUE)
iperf$Total
head(iperf)
#Write out the data we are interested in
iperf <- iperf[, c("instanceID","Total","setId","vmId")]
View(iperf)
View(iperf)
iperf$setId <- rep.int(1, 50)
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(iperf$instanceID)) {
average[index] <- mean(iperf[iperf$instanceID == instance, "Total"])
index <- index + 1
}
iperf <- data.frame(levels(iperf$instanceID), average, rep.int(1, 50), 1:50)
View(iperf)
colnames(iperf) <-c("instanceID","iperf","setId","vmId")
write.csv(iperf,"./iperf_standardized.csv",row.names = FALSE)
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench = sysbench[c("total.time")]
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench$setId <- rep.int(1, 50)
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench <- sysbench[c("vm_ids","instanceID","transactions")]
#Write out the data we are interested in
sysbench <- sysbench[, c("vm_ids","instanceID","transactions")]
tail(sysbench)
#Write out the data we are interested in
sysbench <- sysbench[, c("vm_ids","instanceID","total.time")]
View(sysbench)
sysbench$setId <- rep.int(1, 50)
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "Total"])
index <- index + 1
}
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "total.time"])
index <- index + 1
}
warnings()
levelssysbench$instanceID)
levels(sysbench$instanceID)
sysbench[sysbench$instanceID == "i-0ff32a7bce1e3a734", "total.time"]
warnings()
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "total.time"])
index <- index + 1
}
head(sysbench)
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench <- sysbench[, c("vm_ids","instanceID","total.time")]
sysbench$setId <- rep.int(1, 50)
sysbench$total.time <- as.numeric(gsub("s", "", unlist(sysbench$total.time)))
View(sysbench)
colnames(sysbench) <- c("vmId, instanceID", "sysbench", "setId")
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "total.time"])
index <- index + 1
}
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "sysbench"])
index <- index + 1
}
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "sysbench"])
index <- index + 1
}
head(sysbench)
#Set working Directory for this script and clear the working environment
setwd("/home/ravschoo/ResourceContention/IaaSCloudResourceContention/modeldata/m5d/OpenCloud/")
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench <- sysbench[, c("vm_ids","instanceID","total.time")]
sysbench$setId <- rep.int(1, 50)
sysbench$total.time <- as.numeric(gsub("s", "", unlist(sysbench$total.time)))
colnames(sysbench) <- c("vmId, instanceID", "sysbench", "setId")
rm(list=ls())
sysbench <- read.table("./50x_m5d_sysbench_open_cloud_11-16-2019-14_15pm_14_19pm_us-east-1b.csv", sep=",", header=TRUE)
head(sysbench)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(sysbench, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
sysbench <- sysbench[sysbench$instanceID != "",]
sysbench <- cbind(sysbench, vm_ids)
tail(sysbench)
dim(sysbench)
#Write out the data we are interested in
sysbench <- sysbench[, c("vm_ids","instanceID","total.time")]
sysbench$setId <- rep.int(1, 50)
sysbench$total.time <- as.numeric(gsub("s", "", unlist(sysbench$total.time)))
colnames(sysbench) <- c("vmId", "instanceID", "sysbench", "setId")
#for each vmId save one average.
average <- vector()
index <- 1
for (instance in levels(sysbench$instanceID)) {
average[index] <- mean(sysbench[sysbench$instanceID == instance, "sysbench"])
index <- index + 1
}
average
sysbench <- data.frame(levels(sysbench$instanceID), average, rep.int(1, 50), 1:50)
colnames(sysbench) <-c("instanceID","sysbench", "setId", "vmId")
write.csv(sysbench,"./sysbench_standardized.csv",row.names = FALSE)
#Set working Directory for this script and clear the working environment
setwd("/home/ravschoo/ResourceContention/IaaSCloudResourceContention/modeldata/m5d/OpenCloud/")
rm(list=ls())
ycruncher <- read.table("./50x_m5d_y-cruncher_open_cloud_11-16-2019-14_21pm_14_26pm_us-east-1b.csv", sep=",", header=TRUE)
ycruncher <- read.table("./50x_m5d_y-cruncher_open_cloud_11-16-2019-14_21pm_14_26pm_us-east-1b.csv", sep=",", header=TRUE)
head(ycruncher)
#Take all the instanceID string and convert them to vmid 1-50
#Since this is the open cloud data all vm ran separately on the cloud
temp_vm_id <- subset(ycruncher, subset=instanceID!="")
vm_id <- factor(temp_vm_id$instanceID)
vm_ids <- as.integer(vm_id)
print(min(vm_ids))
print(max(vm_ids))
levels(vm_id)
#Now bind the list of vm ids back into our dataframe
ycruncher <- ycruncher[ycruncher$instanceID != "",]
ycruncher <- cbind(ycruncher, vm_ids)
head(ycruncher)
tail(ycruncher)
#There are exactly as many observations as there should be: 50 * 10 = 500
dim(ycruncher)
ycruncher <- ycruncher[c("vm_ids","instanceID","computationTime")]
colnames(pgbench) <-c("vmId", "instanceID","ycruncher")
#for each instanceID save one average.
average <- vector()
index <- 1
for (instance in levels(ycruncher$instanceID)) {
#print(instance)
average[index] <- mean(ycruncher[ycruncher$instanceID == instance, "ycruncher"])
index <- index + 1
}
warnings()
levels(ycruncher$instanceID)
ycruncher[ycruncher$instanceID == "i-0ff32a7bce1e3a734", "ycruncher"]
head(ycruncher)
colnames(pgbench) <-c("vmId", "instanceID","ycruncher")
colnames(ycruncher) <-c("vmId", "instanceID","ycruncher")
#for each instanceID save one average.
average <- vector()
index <- 1
for (instance in levels(ycruncher$instanceID)) {
#print(instance)
average[index] <- mean(ycruncher[ycruncher$instanceID == instance, "ycruncher"])
index <- index + 1
}
ycruncher <- data.frame(levels(ycruncher$instanceID), average, rep.int(1, 50), 1:50)
View(ycruncher)
colnames(ycruncher) <-c("instanceID","ycruncher", "setId", "vmId")
write.csv(ycruncher,"./ycruncher_standardized.csv",row.names = FALSE)
setwd("/home/ravschoo/ResourceContention/IaaSCloudResourceContention/modeldata/m5d/OpenCloud/")
#Clear workspace
rm(list=ls())
#load Open Cloud data
set.seed(100)
#Clear workspace
rm(list=ls())
#I need to take it each benchmarks data set
ycruncher <- read.table("./ycruncher_standardized.csv", sep=",", header=TRUE)
sysbench <- read.table("./sysbench_standardized.csv", sep=",", header=TRUE)
pgbench <- read.table("./pgbench_standardized.csv", sep=",", header=TRUE)
iperf <- read.table("./iperf_standardized.csv", sep=",", header=TRUE)
#All data sets should have same dimensions
print(dim(iperf))
print(dim(pgbench))
print(dim(sysbench))
print(dim(ycruncher))
#Put all data into a dataframe
globalMerged = data.frame()
for (vm in 1:50) {
a = iperf[iperf$vmId == vm,]
b = sysbench[sysbench$vmId == vm,]
c = ycruncher[ycruncher$vmId == vm,]
d = pgbench[pgbench$vmId == vm,]
merged = cbind(a["iperf"],b["sysbench"],c["ycruncher"],d["pgbench"],1, vm)
globalMerged = rbind(globalMerged, merged)
}
View(globalMerged)
#write it out as merged.csv.
write.csv(globalMerged,"./merged.csv",row.names=FALSE, col.names=FALSE)
#load Open Cloud data
set.seed(100)
wholeSet = read.csv("./merged.csv")
# load the model
super_model <- readRDS("modelRandomForest.rds")
print(super_model)
predictions <- predict(super_model, wholeSet)
predictions
max(predictions)
min(predictions)
mean(predictions)
write.csv(predictions, "./predictions.csv")
